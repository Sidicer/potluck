#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

export HOME=/root

# log function
log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# always disable sshd, we don't need direct access
# XXX: Do this when baking the image
service sshd stop || true
service sshd disable || true

export PATH=/usr/local/share/cook/bin:$PATH

# No need to change this, just ensures configuration is done only once
if [ -e /usr/local/etc/pot-is-seasoned ]; then
    # shellcheck disable=SC3013
    if [ /mnt/vaultcerts/unwrapped.token -ot \
         /mnt/vaultcerts/credentials.json ]; then

        if [ -e /tmp/environment.sh ]; then
            # shellcheck disable=SC1091
            . /tmp/environment.sh

            # XXX: Remove some things from here later
            cp -a /tmp/environment.sh /root/.env.cook
        fi

        log "Seasoned: Set up local_unbound using cluster resolvers"
        setup-local-unbound-provision.sh

        log "Seasoned: Wait until we are able to resolve active vault instance"
        timeout --foreground 120 \
          sh -c 'while ! host -ta active.vault.service.consul; do sleep 1; done'

        log "Seasoned: Unwrap cluster credentials"
        unwrap-cluster-credentials.sh

        log "Seasoned: Start vaultproxy"
        timeout --foreground 120 \
          sh -c 'while ! service nginx status vaultproxy; do
            service nginx start vaultproxy || true; sleep 3;
          done'

        log "Seasoned: Reload vaultproxy"
        service nginx reload vaultproxy

        log "Seasoned: Unwrap consul credentials"
        unwrap-consul-credentials.sh

        log "Seasoned: Configure consul-template"
        configure-consul-template.sh

        log "Seasoned: Configure consul"
        configure-consul.sh

        log "Seasoned: Make sure consul-template is stopped"
        service consul-template stop || true
        service consul-template stop || true

        log "Seasoned: Start consul-template"
        timeout --foreground 20 \
          sh -c 'while ! service consul-template status; do
            service consul-template start || true; sleep 3;
          done'

        log "Seasoned: Start consul and wait for it to become stable"
        timeout --foreground 120 \
          sh -c 'while ! service consul status; do
            service consul start || true; sleep 5;
          done'

        log "Seasoned: Set up local_unbound using local consul"
        setup-local-unbound.sh

        log "Seasoned: Wait until we are able to resolve consul"
        timeout --foreground 120 \
          sh -c 'while ! host -ta consul.service.consul; do sleep 1; done'

        log "Seasoned: Wait until we are able to resolve vault leader"
        timeout --foreground 120 \
          sh -c 'while ! host -ta active.vault.service.consul; do sleep 1; done'
    fi

    pot_seasoned_exit
fi


########################################################################
## Functions and settings
########################################################################


set -e

if [ -e /tmp/environment.sh ]; then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi


########################################################################
## Check config
########################################################################

required_args="DATACENTER IP NODENAME CONSULSERVERS"
optional_args="IP" # hack, might bring back REMOTEIP
optional_args="$optional_args DNSFORWARDERS"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

# stop services
service vault onestop || true
timeout --foreground 10 \
  service consul onestop || service consul onestop || true
killall -9 consul || true

# setup directories for vault usage
mkdir -p /mnt/log
mkdir -p /mnt/templates
mkdir -p /mnt/vaultcerts

log "Set up local_unbound using cluster resolvers"
setup-local-unbound-provision.sh

log "Wait until we are able to resolve active vault instance"
timeout --foreground 120 \
  sh -c 'while ! host -ta active.vault.service.consul; do sleep 1; done'

log "Unwrap cluster credentials"
unwrap-cluster-credentials.sh

log "Unwrap consul credentials"
unwrap-consul-credentials.sh

log "Setup node_exporter"
configure-node-exporter.sh

log "Configure consul-template"
configure-consul-template.sh

log "Configure vaultproxy"
configure-vaultproxy.sh

log "Start vaultproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status vaultproxy; do
    service nginx start vaultproxy || true; sleep 3;
  done'

log "Start consul-template"
timeout --foreground 20 \
  sh -c 'while ! service consul-template status; do
    service consul-template start || true; sleep 3;
  done'

log "Configure nodemetricsproxy"
configure-nodemetricsproxy.sh

log "Start nodemetricsproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status nodemetricsproxy; do
    service nginx start nodemetricsproxy || true; sleep 3;
  done'

log "Configure consul"
configure-consul.sh

log "Start consul and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service consul status; do
    service consul start || true; sleep 5;
  done'

log "Set up local_unbound using local consul"
setup-local-unbound.sh

log "Wait until we are able to resolve consul"
timeout --foreground 120 \
  sh -c 'while ! host -ta consul.service.consul; do sleep 1; done'

log "Configure loki and promtail"
configure-loki.sh

# start loki and promtail
log "Start loki and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service loki status; do
    service loki start || true; sleep 5;
  done'

log "Start promtail and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service promtail status; do
    service promtail start || true; sleep 5;
  done'

# unlike in other images, this always starts, as it's the server
log "Setup and start syslog-ng"
configure-syslog-ng.sh

log "Configure lokiproxy"
configure-lokiproxy.sh

log "Start lokiproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status lokiproxy; do
    service nginx start lokiproxy || true; sleep 3;
  done'

log "Start node_exporter"
service node_exporter start

log "Exit seasoned"
pot_seasoned_exit
