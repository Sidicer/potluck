#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# always disable sshd, we don't need direct access
# XXX: Do this when baking the image
#service sshd stop || true
#service sshd disable || true

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi


########################################################################
## Check config
########################################################################

required_args="DATACENTER IP NODENAME CONSULSERVERS GOSSIPKEY"
required_args="$required_args GRAFANAUSER GRAFANAPASSWORD"
required_args="$required_args SCRAPECONSUL SCRAPENOMAD"
required_args="$required_args TRAEFIKSERVER"
required_args="$required_args SMTPHOSTPORT SMTPFROM ALERTADDRESS"
optional_args="REMOTELOG SMTPUSER SMTPPASS"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

# stop services
timeout --foreground 10 \
  service consul onestop || service consul onestop || true
killall -9 consul || true

# setup directories for local logs
mkdir -p /mnt/applog

# setup directories for persistent storage
mkdir -p /mnt/logs
mkdir -p /mnt/templates
mkdir -p /mnt/prometheus
mkdir -p /mnt/alertmanager
mkdir -p /mnt/grafana
mkdir -p /mnt/loki

export PATH=/usr/local/share/cook/bin:$PATH

log "Configure and start syslog-ng server"
configure-syslog-ng.sh

log "Setup node_exporter"
configure-node-exporter.sh

#log "Configure nodemetricsproxy"
#configure-nodemetricsproxy.sh

#log "Start nodemetricsproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status nodemetricsproxy; do
#    service nginx start nodemetricsproxy || true; sleep 3;
#  done'

#log "Configure consulmetricsproxy"
#configure-consulmetricsproxy.sh

#log "Start consulmetricsproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status consulmetricsproxy; do
#    service nginx start consulmetricsproxy || true; sleep 3;
#  done'

#log "Configure nomadmetricsproxy"
#configure-nomadmetricsproxy.sh

#log "Start nomadmetricsproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status nomadmetricsproxy; do
#    service nginx start nomadmetricsproxy || true; sleep 3;
#  done'

log "Configure consul"
configure-consul.sh

log "Start consul and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service consul status; do
    service consul start || true; sleep 5;
  done'

log "Configure loki and promtail"
configure-loki.sh

# start loki and promtail
log "Start loki and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service loki status; do
    service loki start || true; sleep 5;
  done'

log "Start promtail and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service promtail status; do
    service promtail start || true; sleep 5;
  done'

#log "Configure lokiproxy"
#configure-lokiproxy.sh

#log "Start lokiproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status lokiproxy; do
#    service nginx start lokiproxy || true; sleep 3;
#  done'

log "Setup prometheus"
configure-prometheus.sh

log "Start prometheus"
service prometheus start

log "Start alertmanager"
service alertmanager start

log "Setup grafana"
configure-grafana.sh

log "Start grafana"
service grafana start

#log "Configure grafanaproxy"
#configure-grafanaproxy.sh
#log "Start grafanaproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status grafanaproxy; do
#    service nginx start grafanaproxy || true; sleep 3;
#  done'

#log "Configure prometheusproxy"
#configure-prometheusproxy.sh

#log "Start prometheusproxy"
#timeout --foreground 120 \
#  sh -c 'while ! service nginx status prometheusproxy; do
#    service nginx start prometheusproxy || true; sleep 3;
#  done'

log "Start node_exporter"
service node_exporter start

log "Exit seasoned"
pot_seasoned_exit
