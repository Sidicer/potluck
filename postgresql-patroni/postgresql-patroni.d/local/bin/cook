#!/bin/sh
RUNS_IN_NOMAD=false
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now after configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# always disable sshd, we don't need direct access
# XXX: Do this when baking the image
service sshd stop || true
service sshd disable || true

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi


########################################################################
## Check config
########################################################################

required_args="DATACENTER IP NODENAME CONSULSERVERS SERVICETAG"
optional_args="REMOTELOG"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

# stop services
service vault onestop || true
timeout --foreground 10 \
  service consul onestop || service consul onestop || true
killall -9 consul || true
/usr/local/etc/rc.d/postgresql onestop || true

# setup directories for vault usage
mkdir -p /mnt/log
mkdir -p /mnt/templates
mkdir -p /mnt/vaultcerts

export PATH=/usr/local/share/cook/bin:$PATH

log "Set up local_unbound using cluster resolvers"
setup-local-unbound-provision.sh

log "Wait until we are able to resolve active vault instance"
timeout --foreground 120 \
  sh -c 'while ! host -ta active.vault.service.consul; do sleep 1; done'

log "Unwrap cluster credentials"
unwrap-cluster-credentials.sh

log "Unwrap consul credentials"
unwrap-consul-credentials.sh

log "Unwrap postgres credentials"
unwrap-patroni-credentials.sh

log "Configure node_exporter"
configure-node-exporter.sh

log "Configure consul-template"
configure-consul-template.sh

log "Configure vaultproxy"
configure-vaultproxy.sh

log "Start vaultproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status vaultproxy; do
    service nginx start vaultproxy || true; sleep 3;
  done'

log "Start consul-template"
timeout --foreground 20 \
  sh -c 'while ! service consul-template status; do
    service consul-template start || true; sleep 3;
  done'

log "Configure nodemetricsproxy"
configure-nodemetricsproxy.sh

log "Start nodemetricsproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status nodemetricsproxy; do
    service nginx start nodemetricsproxy || true; sleep 3;
  done'

log "Configure postgresmetricsproxy"
configure-postgresmetricsproxy.sh

log "Start postgresmetricsproxy"
timeout --foreground 120 \
  sh -c 'while ! service nginx status postgresmetricsproxy; do
    service nginx start postgresmetricsproxy || true; sleep 3;
  done'

log "Configure consul"
configure-consul.sh

log "Start consul and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! service consul status; do
    service consul start || true; sleep 5;
  done'

log "Set up local_unbound using local consul"
setup-local-unbound.sh

log "Wait until we are able to resolve consul"
timeout --foreground 120 \
  sh -c 'while ! host -ta consul.service.consul; do sleep 1; done'

log "Configure postgres_exporter"
configure-postgres-exporter.sh

log "Configure patroni postgres"
configure-patroni-postgres.sh

log "Symlink helper scripts"
ln -s /usr/local/share/cook/bin/verifydbcluster.sh /root/verifydbcluster.sh
ln -s /usr/local/share/cook/bin/verifydbnode.sh /root/verifydbnode.sh

log "Start patroni and wait for it to become stable"
timeout --foreground 120 \
  sh -c 'while ! verifydbnode.sh ; do
    service patroni start || true; sleep 20;
  done'

# syslog-ng start is set in the script because it won't run if REMOTELOG
# is empty or null
log "Setup and start syslog-ng"
configure-syslog-ng.sh

log "Start node_exporter"
service node_exporter start

log "Start postgres_exporter service"
service postgres_exporter start

log "Exit seasoned"
pot_seasoned_exit
