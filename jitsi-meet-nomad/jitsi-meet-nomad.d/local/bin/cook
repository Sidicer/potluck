#!/bin/sh
RUNS_IN_NOMAD=true
COOKLOG=/var/log/cook.log

pot_seasoned_exit() {
    [ ! -e /usr/local/etc/pot-is-seasoned ] && \
      touch /usr/local/etc/pot-is-seasoned
    # If this pot flavour is blocking (i.e. it should not return), there is
    # no /tmp/environment.sh created by pot and we now alter configuration
    # block indefinitely
    if [ "$RUNS_IN_NOMAD" = "true" ]; then
        service cook onestop || true
        service cook onedisable || true
        /bin/sh /etc/rc
        tail -f /dev/null
    fi
    exit 0
}

# No need to change this, just ensures configuration is done only once
[ -e /usr/local/etc/pot-is-seasoned ] && pot_seasoned_exit

########################################################################
## Functions and settings
########################################################################

log() {
    echo "$(date '+%Y-%m-%dT%H:%M:%S') $*" | tee -a $COOKLOG
}

convert_to_required_format() {
    echo "$1" | sed 's/\([^,]*\)/"\1"/g'
}

set -e
export HOME=/root

if [ -e /tmp/environment.sh ]
then
    # shellcheck disable=SC1091
    . /tmp/environment.sh

    # XXX: Remove some things from here later
    cp -a /tmp/environment.sh /root/.env.cook
fi

########################################################################
## Get passed in options
########################################################################

OPTIND=1
while getopts "d:e:i:l:n:p:q:r:" option
do
    case "${option}"
    in
      d) DOMAIN=${OPTARG}
         export DOMAIN
         ;;
      e) EMAIL=${OPTARG}
         export EMAIL
         ;;
      i) IMAGE=${OPTARG}
         export IMAGE
         ;;
      l) LINK=${OPTARG}
         export LINK
         ;;
      n) NODENAME=${OPTARG}
         export NODENAME
         ;;
      p) PUBLICIP=${OPTARG}
         export PUBLICIP
         ;;
      q) PRIVATEIP=${OPTARG}
         export PRIVATEIP
         ;;
      r) RESOLUTION=${OPTARG}
         export RESOLUTION
         ;;
    esac
done
shift "$((OPTIND-1))"

########################################################################
## Check config
########################################################################

required_args="NODENAME DOMAIN EMAIL PUBLICIP PRIVATEIP"
optional_args="IMAGE LINK RESOLUTION"

for var in $required_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "$var is unset - see documentation to configure this flavour."
    exit 1
  fi
done

for var in $optional_args; do
  if [ -z "$(eval echo "\${$var}")" ]; then
    log "Optional $var is unset - see documentation to configure this flavour."
  fi
done

########################################################################
## Provision image
########################################################################

export PATH=/usr/local/share/cook/bin:$PATH

# Generate a password for stitching up the various parts of the configuration
# shellcheck disable=SC2002
KEYPASSWORD="$(cat /dev/urandom | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 16; echo)"
export KEYPASSWORD

# Generate a password for the turnserver and then hash it with turnadmin
# shellcheck disable=SC2002
TURNPASSWORD="$(cat /dev/urandom | env LC_CTYPE=C tr -dc a-zA-Z0-9 | head -c 16; echo)"
# make sure to get only the final line output as turnadmin produces several lines now
HASHTURNPASSWORD=$(/usr/local/bin/turnadmin -P -p "$TURNPASSWORD" | tail -1)
export HASHTURNPASSWORD

#log "Configure acme.sh"
#configure-acme.sh

log "Configure prosody"
configure-prosody.sh

log "Configure nginx"
configure-nginx.sh

#disabling as needs certificates
#log "Configure turnserver"
#configure-turnserver.sh

log "Configure jitsi-videobridge"
configure-jitsi-videobridge.sh

log "Configure jicofo"
configure-jicofo.sh

# Startup ordering as outlined in  https://youtu.be/LJOpSDcwWIA
# 1. web
# 2. turnserver
# 2. prosody
# 3. jicofo
# 4. jitsi-videobridge

log "Start nginx"
service nginx start

# disablign turnserver as needs certificates
#log "Start turnserver"
#service turnserver start

log "Start prosody"
service prosody start

log "first pause"
sleep 5 || true

log "Start jicofo"
service jicofo start

log "Start jitsi-videobridge"
service jitsi-videobridge start

# end script placement
log "Exit seasoned"
pot_seasoned_exit
